
at90_6_2(1).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002cc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800100  00800100  00000340  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000370  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f0b  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b37  00000000  00000000  00001317  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000054d  00000000  00000000  00001e4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b4  00000000  00000000  0000239c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ec  00000000  00000000  00002450  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000149  00000000  00000000  00002a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002b85  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   8:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  10:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  14:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  18:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  1c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  20:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  24:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  28:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  2c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  30:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  34:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  38:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  3c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  40:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  44:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  48:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  4c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  50:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  54:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  58:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  5c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  60:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  68:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  6c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  70:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  74:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  78:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  7c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  80:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  84:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  88:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  8c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  90:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d8 e0       	ldi	r29, 0x08	; 8
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_clear_bss>:
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
  a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
  aa:	aa 30       	cpi	r26, 0x0A	; 10
  ac:	b2 07       	cpc	r27, r18
  ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>
  b0:	0e 94 a1 00 	call	0x142	; 0x142 <main>
  b4:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <_exit>

000000b8 <__bad_interrupt>:
  b8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000bc <UART1_Init>:
	//  uint8_t uart - which uart to send on
	//  uint16_t val - the "word" to print
	void uart_print16(uint16_t val){
		uart_print8(val >> 8);
		uart_print8(val);
	}
  bc:	e9 ec       	ldi	r30, 0xC9	; 201
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	88 60       	ori	r24, 0x08	; 8
  c4:	80 83       	st	Z, r24
  c6:	80 81       	ld	r24, Z
  c8:	80 61       	ori	r24, 0x10	; 16
  ca:	80 83       	st	Z, r24
  cc:	ea ec       	ldi	r30, 0xCA	; 202
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	8f 7b       	andi	r24, 0xBF	; 191
  d4:	80 83       	st	Z, r24
  d6:	80 81       	ld	r24, Z
  d8:	8f 7d       	andi	r24, 0xDF	; 223
  da:	80 83       	st	Z, r24
  dc:	80 81       	ld	r24, Z
  de:	8f 7e       	andi	r24, 0xEF	; 239
  e0:	80 83       	st	Z, r24
  e2:	80 81       	ld	r24, Z
  e4:	8f 7b       	andi	r24, 0xBF	; 191
  e6:	80 83       	st	Z, r24
  e8:	80 81       	ld	r24, Z
  ea:	8b 7f       	andi	r24, 0xFB	; 251
  ec:	80 83       	st	Z, r24
  ee:	80 81       	ld	r24, Z
  f0:	84 60       	ori	r24, 0x04	; 4
  f2:	80 83       	st	Z, r24
  f4:	80 81       	ld	r24, Z
  f6:	82 60       	ori	r24, 0x02	; 2
  f8:	80 83       	st	Z, r24
  fa:	87 e6       	ldi	r24, 0x67	; 103
  fc:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 100:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 104:	08 95       	ret

00000106 <USART1_Transmit>:
 106:	e8 ec       	ldi	r30, 0xC8	; 200
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	90 81       	ld	r25, Z
 10c:	95 ff       	sbrs	r25, 5
 10e:	fd cf       	rjmp	.-6      	; 0x10a <USART1_Transmit+0x4>
 110:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 114:	08 95       	ret

00000116 <uart_print4>:
 116:	8f 70       	andi	r24, 0x0F	; 15
 118:	8a 30       	cpi	r24, 0x0A	; 10
 11a:	20 f4       	brcc	.+8      	; 0x124 <uart_print4+0xe>
 11c:	80 5d       	subi	r24, 0xD0	; 208
 11e:	0e 94 83 00 	call	0x106	; 0x106 <USART1_Transmit>
 122:	08 95       	ret
 124:	89 5c       	subi	r24, 0xC9	; 201
 126:	0e 94 83 00 	call	0x106	; 0x106 <USART1_Transmit>
 12a:	08 95       	ret

0000012c <uart_print8>:
 12c:	cf 93       	push	r28
 12e:	c8 2f       	mov	r28, r24
 130:	82 95       	swap	r24
 132:	8f 70       	andi	r24, 0x0F	; 15
 134:	0e 94 8b 00 	call	0x116	; 0x116 <uart_print4>
 138:	8c 2f       	mov	r24, r28
 13a:	0e 94 8b 00 	call	0x116	; 0x116 <uart_print4>
 13e:	cf 91       	pop	r28
 140:	08 95       	ret

00000142 <main>:
//CLKPR=0x80;
//CLKPR=0x00;
//declararea porturilor


OUTPUT(G,1);
 142:	99 9a       	sbi	0x13, 1	; 19
SET_PIN_HI(G,1);
 144:	a1 9a       	sbi	0x14, 1	; 20


//LCDInit();
UART1_Init();
 146:	0e 94 5e 00 	call	0xbc	; 0xbc <UART1_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14a:	2f ef       	ldi	r18, 0xFF	; 255
 14c:	89 e6       	ldi	r24, 0x69	; 105
 14e:	98 e1       	ldi	r25, 0x18	; 24
 150:	21 50       	subi	r18, 0x01	; 1
 152:	80 40       	sbci	r24, 0x00	; 0
 154:	90 40       	sbci	r25, 0x00	; 0
 156:	e1 f7       	brne	.-8      	; 0x150 <main+0xe>
 158:	00 c0       	rjmp	.+0      	; 0x15a <main+0x18>
 15a:	00 00       	nop
{
	throttle_c=0;
}
if (eng_temp_c==100)
{
	eng_temp_c=75;
 15c:	0f 2e       	mov	r0, r31
 15e:	fb e4       	ldi	r31, 0x4B	; 75
 160:	ff 2e       	mov	r15, r31
 162:	f0 2d       	mov	r31, r0
}
if (air_temp_c==30)
{
	air_temp_c=20;
 164:	04 e1       	ldi	r16, 0x14	; 20
}
if (gear_c==6)
{
	gear_c=1;
 166:	11 e0       	ldi	r17, 0x01	; 1
map_c++;
maf_c++;
oilp_c++;
uart_print8(0xAF);

uart_print8(rpm_c);
 168:	c0 e0       	ldi	r28, 0x00	; 0
 16a:	d1 e0       	ldi	r29, 0x01	; 1

//LCDShowChar("BlueStreamline",0,0);
	while(1)
	{

if (rpm_c==170)
 16c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 170:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 174:	8a 3a       	cpi	r24, 0xAA	; 170
 176:	91 05       	cpc	r25, r1
 178:	21 f4       	brne	.+8      	; 0x182 <main+0x40>
{
	rpm_c=0;
 17a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 17e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
}
if (throttle_c==100)
 182:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <throttle_c>
 186:	84 36       	cpi	r24, 0x64	; 100
 188:	11 f4       	brne	.+4      	; 0x18e <main+0x4c>
{
	throttle_c=0;
 18a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <throttle_c>
}
if (eng_temp_c==100)
 18e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <eng_temp_c>
 192:	84 36       	cpi	r24, 0x64	; 100
 194:	11 f4       	brne	.+4      	; 0x19a <main+0x58>
{
	eng_temp_c=75;
 196:	f0 92 05 01 	sts	0x0105, r15	; 0x800105 <eng_temp_c>
}
if (air_temp_c==30)
 19a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <air_temp_c>
 19e:	8e 31       	cpi	r24, 0x1E	; 30
 1a0:	11 f4       	brne	.+4      	; 0x1a6 <main+0x64>
{
	air_temp_c=20;
 1a2:	00 93 07 01 	sts	0x0107, r16	; 0x800107 <air_temp_c>
}
if (gear_c==6)
 1a6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <gear_c>
 1aa:	86 30       	cpi	r24, 0x06	; 6
 1ac:	11 f4       	brne	.+4      	; 0x1b2 <main+0x70>
{
	gear_c=1;
 1ae:	10 93 03 01 	sts	0x0103, r17	; 0x800103 <gear_c>
}

if (map_c==200)
 1b2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <map_c>
 1b6:	88 3c       	cpi	r24, 0xC8	; 200
 1b8:	11 f4       	brne	.+4      	; 0x1be <main+0x7c>
{
	map_c=0;
 1ba:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <map_c>
}
if (maf_c==230)
 1be:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <maf_c>
 1c2:	86 3e       	cpi	r24, 0xE6	; 230
 1c4:	11 f4       	brne	.+4      	; 0x1ca <main+0x88>
{
	maf_c=0;
 1c6:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <maf_c>
}
if (oilp_c==250)
 1ca:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <oilp_c>
 1ce:	8a 3f       	cpi	r24, 0xFA	; 250
 1d0:	11 f4       	brne	.+4      	; 0x1d6 <main+0x94>
{
	oilp_c=0;
 1d2:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <oilp_c>
}
rpm_c++;
 1d6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1da:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 1de:	01 96       	adiw	r24, 0x01	; 1
 1e0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1e4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
throttle_c++;
 1e8:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <throttle_c>
 1ec:	9f 5f       	subi	r25, 0xFF	; 255
 1ee:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <throttle_c>
eng_temp_c++;
 1f2:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <eng_temp_c>
 1f6:	9f 5f       	subi	r25, 0xFF	; 255
 1f8:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <eng_temp_c>
air_temp_c++;
 1fc:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <air_temp_c>
 200:	9f 5f       	subi	r25, 0xFF	; 255
 202:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <air_temp_c>
gear_c++;
 206:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <gear_c>
 20a:	9f 5f       	subi	r25, 0xFF	; 255
 20c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <gear_c>
map_c++;
 210:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <map_c>
 214:	9f 5f       	subi	r25, 0xFF	; 255
 216:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <map_c>
maf_c++;
 21a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <maf_c>
 21e:	9f 5f       	subi	r25, 0xFF	; 255
 220:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <maf_c>
oilp_c++;
 224:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <oilp_c>
 228:	9f 5f       	subi	r25, 0xFF	; 255
 22a:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <oilp_c>
uart_print8(0xAF);
 22e:	8f ea       	ldi	r24, 0xAF	; 175
 230:	0e 94 96 00 	call	0x12c	; 0x12c <uart_print8>

uart_print8(rpm_c);
 234:	88 81       	ld	r24, Y
 236:	0e 94 96 00 	call	0x12c	; 0x12c <uart_print8>
USART1_Transmit('t');
 23a:	84 e7       	ldi	r24, 0x74	; 116
 23c:	0e 94 83 00 	call	0x106	; 0x106 <USART1_Transmit>
uart_print8(0x01);
 240:	81 2f       	mov	r24, r17
 242:	0e 94 96 00 	call	0x12c	; 0x12c <uart_print8>
USART1_Transmit('t');
 246:	84 e7       	ldi	r24, 0x74	; 116
 248:	0e 94 83 00 	call	0x106	; 0x106 <USART1_Transmit>
uart_print8(throttle_c);
 24c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <throttle_c>
 250:	0e 94 96 00 	call	0x12c	; 0x12c <uart_print8>
USART1_Transmit('t');
 254:	84 e7       	ldi	r24, 0x74	; 116
 256:	0e 94 83 00 	call	0x106	; 0x106 <USART1_Transmit>
uart_print8(eng_temp_c);
 25a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <eng_temp_c>
 25e:	0e 94 96 00 	call	0x12c	; 0x12c <uart_print8>
USART1_Transmit('t');
 262:	84 e7       	ldi	r24, 0x74	; 116
 264:	0e 94 83 00 	call	0x106	; 0x106 <USART1_Transmit>
uart_print8(air_temp_c);
 268:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <air_temp_c>
 26c:	0e 94 96 00 	call	0x12c	; 0x12c <uart_print8>
USART1_Transmit('t');
 270:	84 e7       	ldi	r24, 0x74	; 116
 272:	0e 94 83 00 	call	0x106	; 0x106 <USART1_Transmit>
uart_print8(gear_c);
 276:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <gear_c>
 27a:	0e 94 96 00 	call	0x12c	; 0x12c <uart_print8>
USART1_Transmit('t');
 27e:	84 e7       	ldi	r24, 0x74	; 116
 280:	0e 94 83 00 	call	0x106	; 0x106 <USART1_Transmit>
uart_print8(map_c);
 284:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <map_c>
 288:	0e 94 96 00 	call	0x12c	; 0x12c <uart_print8>
USART1_Transmit('t');
 28c:	84 e7       	ldi	r24, 0x74	; 116
 28e:	0e 94 83 00 	call	0x106	; 0x106 <USART1_Transmit>
uart_print8(maf_c);
 292:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <maf_c>
 296:	0e 94 96 00 	call	0x12c	; 0x12c <uart_print8>
USART1_Transmit('t');
 29a:	84 e7       	ldi	r24, 0x74	; 116
 29c:	0e 94 83 00 	call	0x106	; 0x106 <USART1_Transmit>
uart_print8(oilp_c);
 2a0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <oilp_c>
 2a4:	0e 94 96 00 	call	0x12c	; 0x12c <uart_print8>
USART1_Transmit('t');
 2a8:	84 e7       	ldi	r24, 0x74	; 116
 2aa:	0e 94 83 00 	call	0x106	; 0x106 <USART1_Transmit>
USART1_Transmit('\n');
 2ae:	8a e0       	ldi	r24, 0x0A	; 10
 2b0:	0e 94 83 00 	call	0x106	; 0x106 <USART1_Transmit>
 2b4:	2f ef       	ldi	r18, 0xFF	; 255
 2b6:	89 ef       	ldi	r24, 0xF9	; 249
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	21 50       	subi	r18, 0x01	; 1
 2bc:	80 40       	sbci	r24, 0x00	; 0
 2be:	90 40       	sbci	r25, 0x00	; 0
 2c0:	e1 f7       	brne	.-8      	; 0x2ba <main+0x178>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <main+0x182>
 2c4:	00 00       	nop
 2c6:	52 cf       	rjmp	.-348    	; 0x16c <main+0x2a>

000002c8 <_exit>:
 2c8:	f8 94       	cli

000002ca <__stop_program>:
 2ca:	ff cf       	rjmp	.-2      	; 0x2ca <__stop_program>
