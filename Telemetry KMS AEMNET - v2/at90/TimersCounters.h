//To used this file, please include in the project the BitOperations.h file;
/*
//============ ATMEGA88 ========================================================================//
//============= TIMER0============= //
//STOP;
#define TIMER0_STOP B0(TCCR0B,CS02);B0(TCCR0B,CS01);B0(TCCR0B,CS00)
//PRESCALER; 
#define TIMER0_START_1 B0(TCCR0B,CS02);B0(TCCR0B,CS01);B1(TCCR0B,CS00)
#define TIMER0_START_8 B0(TCCR0B,CS02);B1(TCCR0B,CS01);B0(TCCR0B,CS00)
#define TIMER0_START_64 B0(TCCR0B,CS02);B1(TCCR0B,CS01);B1(TCCR0B,CS00)
#define TIMER0_START_256 B1(TCCR0B,CS02);B0(TCCR0B,CS01);B0(TCCR0B,CS00)
#define TIMER0_START_1024 B1(TCCR0B,CS02);B0(TCCR0B,CS01);B1(TCCR0B,CS00)
//VALUE;
#define TIMER0_SET_VALUE(val) TCNT0=val //val = [0 ~ 255];
#define TIMER0_VALUE TCNT0
//============= TIMER1============= //
//STOP;
#define TIMER1_STOP B0(TCCR1B,CS12);B0(TCCR1B,CS11);B0(TCCR1B,CS10)
//PRESCALER;
#define TIMER1_START_1 B0(TCCR1B,CS12);B0(TCCR1B,CS11);B1(TCCR1B,CS10)
#define TIMER1_START_8 B0(TCCR1B,CS12);B1(TCCR1B,CS11);B0(TCCR1B,CS10)
#define TIMER1_START_64 B0(TCCR1B,CS12);B1(TCCR1B,CS11);B1(TCCR1B,CS10)
#define TIMER1_START_256 B1(TCCR1B,CS12);B0(TCCR1B,CS11);B0(TCCR1B,CS10)
#define TIMER1_START_1024 B1(TCCR1B,CS12);B0(TCCR1B,CS11);B1(TCCR1B,CS10)
//VALUE;
#define TIMER1_SET_VALUE(val) TCNT1=val //val = [0 ~ 65536];
#define TIMER1_VALUE TCNT1 //val = [0 ~ 65536];
//MODE:
//NORMAL;
#define TIMER1_NORMAL B0(TCCR1B,WGM13);B0(TCCR1B,WGM12);B0(TCCR1A,WGM11);B0(TCCR1A,WGM10)
//PWM;
#define TIMER1_PWM_PHASECORRECT_8BIT B0(TCCR1B,WGM13);B0(TCCR1B,WGM12);B0(TCCR1A,WGM11);B1(TCCR1A,WGM10)
#define TIMER1_PWM_PHASECORRECT_9BIT B0(TCCR1B,WGM13);B0(TCCR1B,WGM12);B1(TCCR1A,WGM11);B0(TCCR1A,WGM10)
#define TIMER1_PWM_PHASECORRECT_10BIT B0(TCCR1B,WGM13);B0(TCCR1B,WGM12);B1(TCCR1A,WGM11);B1(TCCR1A,WGM10)
#define TIMER1_PWM_PHASECORRECT_ICR1 B1(TCCR1B,WGM13);B0(TCCR1B,WGM12);B1(TCCR1A,WGM11);B0(TCCR1A,WGM10)
#define TIMER1_PWM_PHASECORRECT_OCR1A B1(TCCR1B,WGM13);B0(TCCR1B,WGM12);B1(TCCR1A,WGM11);B1(TCCR1A,WGM10)
#define TIMER1_PWM_PHASE_AND_FREQUENCY_CORRECT_ICR1 B1(TCCR1B,WGM13);B0(TCCR1B,WGM12);B0(TCCR1A,WGM11);B0(TCCR1A,WGM10)
#define TIMER1_PWM_PHASE_AND_FREQUENCY_CORRECT_OCR1A B1(TCCR1B,WGM13);B0(TCCR1B,WGM12);B0(TCCR1A,WGM11);B1(TCCR1A,WGM10)
//FAST_PWM;
#define TIMER1_FASTPWM_8BIT B0(TCCR1B,WGM13);B1(TCCR1B,WGM12);B0(TCCR1A,WGM11);B1(TCCR1A,WGM10)
#define TIMER1_FASTPWM_9BIT B0(TCCR1B,WGM13);B1(TCCR1B,WGM12);B1(TCCR1A,WGM11);B0(TCCR1A,WGM10)
#define TIMER1_FASTPWM_10BIT B0(TCCR1B,WGM13);B1(TCCR1B,WGM12);B1(TCCR1A,WGM11);B1(TCCR1A,WGM10)
#define TIMER1_FASTPWM_ICR1 B1(TCCR1B,WGM13);B1(TCCR1B,WGM12);B1(TCCR1A,WGM11);B0(TCCR1A,WGM10)
#define TIMER1_FASTPWM_OCR1A B1(TCCR1B,WGM13);B1(TCCR1B,WGM12);B1(TCCR1A,WGM11);B1(TCCR1A,WGM10)
//CTC;
#define TIMER1_CTC_OCR1A B0(TCCR1B,WGM13);B1(TCCR1B,WGM12);B0(TCCR1A,WGM11);B0(TCCR1A,WGM10)
#define TIMER1_CTC_ICR1 B1(TCCR1B,WGM13);B1(TCCR1B,WGM12);B0(TCCR1A,WGM11);B0(TCCR1A,WGM10)
//TIMER1_CONNECTION:
//OC1A_NORMAL;
#define OC1A_NORMAL_AND_CTC_NO_OUTPUT B0(TCCR1A,COM1A1);B0(TCCR1A,COM1A0)
#define OC1A_NORMAL_AND_CTC_TOGGLE B0(TCCR1A,COM1A1);B1(TCCR1A,COM1A0)
#define OC1A_NORMAL_AND_CTC_CLEAR B1(TCCR1A,COM1A1);B0(TCCR1A,COM1A0)
#define OC1A_NORMAL_AND_CTC_SET B1(TCCR1A,COM1A1);B1(TCCR1A,COM1A0)
//OC1A_FAST_PWM;
#define OC1A_FASTPWM_NO_OUTPUT B0(TCCR1A,COM1A1);B0(TCCR1A,COM1A0)
#define OC1A_FASTPWM_TOGGLE B0(TCCR1A,COM1A1);B1(TCCR1A,COM1A0)
#define OC1A_FASTPWM_CLEAR B1(TCCR1A,COM1A1);B0(TCCR1A,COM1A0)
#define OC1A_FASTPWM_SET B1(TCCR1A,COM1A1);B1(TCCR1A,COM1A0)
//OC1A_PHASE_CORRECT;
#define OC1A_PHASECORRECT_AND_PHASE_AND_FREQUENCYCORRECT_NO_OUTPUT B0(TCCR1A,COM1A1);B0(TCCR1A,COM1A0)
#define OC1A_PHASECORRECT_AND_PHASE_AND_FREQUENCYCORRECT_TOGGLE B0(TCCR1A,COM1A1);B1(TCCR1A,COM1A0)
#define OC1A_PHASECORRECT_AND_PHASE_AND_FREQUENCYCORRECT_CLEAR B1(TCCR1A,COM1A1);B0(TCCR1A,COM1A0)
#define OC1A_PHASECORRECT_AND_PHASE_AND_FREQUENCYCORRECT_SET B1(TCCR1A,COM1A1);B1(TCCR1A,COM1A0)
//OC1B_NORMAL;
#define OC1B_NORMAL_AND_CTC_NO_OUTPUT B0(TCCR1A,COM1B1);B0(TCCR1A,COM1B0)
#define OC1B_NORMAL_AND_CTC_TOGGLE B0(TCCR1A,COM1B1);B1(TCCR1A,COM1B0)
#define OC1B_NORMAL_AND_CTC_CLEAR B1(TCCR1A,COM1B1);B0(TCCR1A,COM1B0)
#define OC1B_NORMAL_AND_CTC_SET B1(TCCR1A,COM1B1);B1(TCCR1A,COM1B0)
//OC1B_FAST_PWM;
#define OC1B_FASTPWM_NO_OUTPUT B0(TCCR1A,COM1B1);B0(TCCR1A,COM1B0)
#define OC1B_FASTPWM_TOGGLE B0(TCCR1A,COM1B1);B1(TCCR1A,COM1B0)
#define OC1B_FASTPWM_CLEAR B1(TCCR1A,COM1B1);B0(TCCR1A,COM1B0)
#define OC1B_FASTPWM_SET B1(TCCR1A,COM1B1);B1(TCCR1A,COM1B0)
//OC1B_PHASE_CORRECT;
#define OC1B_PHASECORRECT_AND_PHASE_AND_FREQUENCYCORRECT_NO_OUTPUT B0(TCCR1A,COM1B1);B0(TCCR1A,COM1B0)
#define OC1B_PHASECORRECT_AND_PHASE_AND_FREQUENCYCORRECT_TOGGLE B0(TCCR1A,COM1B1);B1(TCCR1A,COM1B0)
#define OC1B_PHASECORRECT_AND_PHASE_AND_FREQUENCYCORRECT_CLEAR B1(TCCR1A,COM1B1);B0(TCCR1A,COM1B0)
#define OC1B_PHASECORRECT_AND_PHASE_AND_FREQUENCYCORRECT_SET B1(TCCR1A,COM1B1);B1(TCCR1A,COM1B0)
//============= TIMER2============= //
//STOP;
#define TIMER2_STOP B0(TCCR2B,CS22);B0(TCCR2B,CS21);B0(TCCR2B,CS20)
//PRESCALER; 
#define TIMER2_START_1 B0(TCCR2B,CS22);B0(TCCR2B,CS21);B1(TCCR2B,CS20)
#define TIMER2_START_8 B0(TCCR2B,CS22);B1(TCCR2B,CS21);B0(TCCR2B,CS20)
#define TIMER2_START_64 B0(TCCR2B,CS22);B1(TCCR2B,CS21);B1(TCCR2B,CS20)
#define TIMER2_START_256 B1(TCCR2B,CS22);B0(TCCR2B,CS21);B0(TCCR2B,CS20)
#define TIMER2_START_1024 B1(TCCR2B,CS22);B0(TCCR2B,CS21);B1(TCCR2B,CS20)
//VALUE;
#define TIMER2_SET_VALUE(val) TCNT2=val //val = [0 ~ 255];
#define TIMER2_VALUE TCNT2
*/
//==============================================================================================//
/*Set PWM Output Frequency with Variable DutyCycle;
#define TIMERCOUNTER1_INIT \
					TIMER1_START_1;\ //Set Clock of PWM Timer;
					TIMER1_FASTPWM_8BIT;\ //Set PWM type;
					OC1A_FASTPWM_CLEAR;\ //Go out the PWM signal invert;
					OCR1A=120//[0=MinHI; 254_MaxHi]; 255=OnlyHi;
*/


/*
//============ ATMEGA16A ========================================================================//
//============= TIMER0============= //
//FORCE OUTPUT COMPARE
#define TIMER0_FORCE_OUTPUT_COMPARE B1(TCCR0,FOC0);
//WAVEFORM GENERATION MODE
#define	TIMER0_WAVEFORM_NORMAL				B0(TCCR0,WGM01);B0(TCCR0,WGM00) 
#define	TIMER0_WAVEFORM_PHASE_CORRECT_PWM	B0(TCCR0,WGM01);B1(TCCR0,WGM00)
#define	TIMER0_WAVEFORM_CTC					B1(TCCR0,WGM01);B0(TCCR0,WGM00)
#define	TIMER0_WAVEFORM_FAST_PWM			B1(TCCR0,WGM01);B1(TCCR0,WGM00)
//COMPARE OUTPUT MODE, NON-PWM MODE
#define TIMER0_NONPWM_NORMAL				B0(TCCR0,COM01);B0(TCCR0,COM00)
#define TIMER0_NONPWMRE_TOGGLE				B0(TCCR0,COM01);B1(TCCR0,COM00)
#define TIMER0_NONPWM_CLEAR					B1(TCCR0,COM01);B0(TCCR0,COM00)
#define TIMER0_NONPWM_SET					B1(TCCR0,COM01);B1(TCCR0,COM00)
//COMPARE OUTPUT MODE, FAST-PWM MODE
#define TIMER0_FASTPWM_NORMAL				B0(TCCR0,COM01);B0(TCCR0,COM00)
#define TIMER0_FASTPWM_RESERVED				B0(TCCR0,COM01);B1(TCCR0,COM00)
#define TIMER0_FASTPWM_NON_INVERTING		B1(TCCR0,COM01);B0(TCCR0,COM00)
#define TIMER0_FASTPWM_INVERTING			B1(TCCR0,COM01);B1(TCCR0,COM00)
//COMPARE OUTPUT MODE, PHASE CORRECT PWM MODE



//STOP;
#define TIMER0_STOP			B0(TCCR0,CS02);B0(TCCR0,CS01);B0(TCCR0,CS00)
//PRESCALER;
#define TIMER0_START_1		B0(TCCR0,CS02);B0(TCCR0,CS01);B1(TCCR0,CS00)
#define TIMER0_START_8		B0(TCCR0,CS02);B1(TCCR0,CS01);B0(TCCR0,CS00)
#define TIMER0_START_64		B0(TCCR0,CS02);B1(TCCR0,CS01);B1(TCCR0,CS00)
#define TIMER0_START_256	B1(TCCR0,CS02);B0(TCCR0,CS01);B0(TCCR0,CS00)
#define TIMER0_START_1024	B1(TCCR0,CS02);B0(TCCR0,CS01);B1(TCCR0,CS00)
//VALUE;
#define TIMER0_SET_VALUE(val) TCNT0=val //val = [0 ~ 255];
#define TIMER0_VALUE TCNT0

void PWMInit()
{
	TIMER0_WAVEFORM_FAST_PWM;
	TIMER0_FASTPWM_NON_INVERTING;
	TIMER0_START_1024;
}
void PWMOutputSet(uint8_t duty)
{
	OCR0=duty;
}

// DE MODIFICAT IN CONTINUARE
//============= TIMER1============= //
//STOP;
#define TIMER1_STOP B0(TCCR1B,CS12);B0(TCCR1B,CS11);B0(TCCR1B,CS10)
//PRESCALER;
#define TIMER1_START_1 B0(TCCR1B,CS12);B0(TCCR1B,CS11);B1(TCCR1B,CS10)
#define TIMER1_START_8 B0(TCCR1B,CS12);B1(TCCR1B,CS11);B0(TCCR1B,CS10)
#define TIMER1_START_64 B0(TCCR1B,CS12);B1(TCCR1B,CS11);B1(TCCR1B,CS10)
#define TIMER1_START_256 B1(TCCR1B,CS12);B0(TCCR1B,CS11);B0(TCCR1B,CS10)
#define TIMER1_START_1024 B1(TCCR1B,CS12);B0(TCCR1B,CS11);B1(TCCR1B,CS10)
//VALUE;
#define TIMER1_SET_VALUE(val) TCNT1=val //val = [0 ~ 65536];
#define TIMER1_VALUE TCNT1 //val = [0 ~ 65536];
//MODE:
//NORMAL;
#define TIMER1_NORMAL B0(TCCR1B,WGM13);B0(TCCR1B,WGM12);B0(TCCR1A,WGM11);B0(TCCR1A,WGM10)
//PWM;
#define TIMER1_PWM_PHASECORRECT_8BIT B0(TCCR1B,WGM13);B0(TCCR1B,WGM12);B0(TCCR1A,WGM11);B1(TCCR1A,WGM10)
#define TIMER1_PWM_PHASECORRECT_9BIT B0(TCCR1B,WGM13);B0(TCCR1B,WGM12);B1(TCCR1A,WGM11);B0(TCCR1A,WGM10)
#define TIMER1_PWM_PHASECORRECT_10BIT B0(TCCR1B,WGM13);B0(TCCR1B,WGM12);B1(TCCR1A,WGM11);B1(TCCR1A,WGM10)
#define TIMER1_PWM_PHASECORRECT_ICR1 B1(TCCR1B,WGM13);B0(TCCR1B,WGM12);B1(TCCR1A,WGM11);B0(TCCR1A,WGM10)
#define TIMER1_PWM_PHASECORRECT_OCR1A B1(TCCR1B,WGM13);B0(TCCR1B,WGM12);B1(TCCR1A,WGM11);B1(TCCR1A,WGM10)
#define TIMER1_PWM_PHASE_AND_FREQUENCY_CORRECT_ICR1 B1(TCCR1B,WGM13);B0(TCCR1B,WGM12);B0(TCCR1A,WGM11);B0(TCCR1A,WGM10)
#define TIMER1_PWM_PHASE_AND_FREQUENCY_CORRECT_OCR1A B1(TCCR1B,WGM13);B0(TCCR1B,WGM12);B0(TCCR1A,WGM11);B1(TCCR1A,WGM10)
//FAST_PWM;
#define TIMER1_FASTPWM_8BIT B0(TCCR1B,WGM13);B1(TCCR1B,WGM12);B0(TCCR1A,WGM11);B1(TCCR1A,WGM10)
#define TIMER1_FASTPWM_9BIT B0(TCCR1B,WGM13);B1(TCCR1B,WGM12);B1(TCCR1A,WGM11);B0(TCCR1A,WGM10)
#define TIMER1_FASTPWM_10BIT B0(TCCR1B,WGM13);B1(TCCR1B,WGM12);B1(TCCR1A,WGM11);B1(TCCR1A,WGM10)
#define TIMER1_FASTPWM_ICR1 B1(TCCR1B,WGM13);B1(TCCR1B,WGM12);B1(TCCR1A,WGM11);B0(TCCR1A,WGM10)
#define TIMER1_FASTPWM_OCR1A B1(TCCR1B,WGM13);B1(TCCR1B,WGM12);B1(TCCR1A,WGM11);B1(TCCR1A,WGM10)
//CTC;
#define TIMER1_CTC_OCR1A B0(TCCR1B,WGM13);B1(TCCR1B,WGM12);B0(TCCR1A,WGM11);B0(TCCR1A,WGM10)
#define TIMER1_CTC_ICR1 B1(TCCR1B,WGM13);B1(TCCR1B,WGM12);B0(TCCR1A,WGM11);B0(TCCR1A,WGM10)
//TIMER1_CONNECTION:
//OC1A_NORMAL;
#define OC1A_NORMAL_AND_CTC_NO_OUTPUT B0(TCCR1A,COM1A1);B0(TCCR1A,COM1A0)
#define OC1A_NORMAL_AND_CTC_TOGGLE B0(TCCR1A,COM1A1);B1(TCCR1A,COM1A0)
#define OC1A_NORMAL_AND_CTC_CLEAR B1(TCCR1A,COM1A1);B0(TCCR1A,COM1A0)
#define OC1A_NORMAL_AND_CTC_SET B1(TCCR1A,COM1A1);B1(TCCR1A,COM1A0)
//OC1A_FAST_PWM;
#define OC1A_FASTPWM_NO_OUTPUT B0(TCCR1A,COM1A1);B0(TCCR1A,COM1A0)
#define OC1A_FASTPWM_TOGGLE B0(TCCR1A,COM1A1);B1(TCCR1A,COM1A0)
#define OC1A_FASTPWM_CLEAR B1(TCCR1A,COM1A1);B0(TCCR1A,COM1A0)
#define OC1A_FASTPWM_SET B1(TCCR1A,COM1A1);B1(TCCR1A,COM1A0)
//OC1A_PHASE_CORRECT;
#define OC1A_PHASECORRECT_AND_PHASE_AND_FREQUENCYCORRECT_NO_OUTPUT B0(TCCR1A,COM1A1);B0(TCCR1A,COM1A0)
#define OC1A_PHASECORRECT_AND_PHASE_AND_FREQUENCYCORRECT_TOGGLE B0(TCCR1A,COM1A1);B1(TCCR1A,COM1A0)
#define OC1A_PHASECORRECT_AND_PHASE_AND_FREQUENCYCORRECT_CLEAR B1(TCCR1A,COM1A1);B0(TCCR1A,COM1A0)
#define OC1A_PHASECORRECT_AND_PHASE_AND_FREQUENCYCORRECT_SET B1(TCCR1A,COM1A1);B1(TCCR1A,COM1A0)
//OC1B_NORMAL;
#define OC1B_NORMAL_AND_CTC_NO_OUTPUT B0(TCCR1A,COM1B1);B0(TCCR1A,COM1B0)
#define OC1B_NORMAL_AND_CTC_TOGGLE B0(TCCR1A,COM1B1);B1(TCCR1A,COM1B0)
#define OC1B_NORMAL_AND_CTC_CLEAR B1(TCCR1A,COM1B1);B0(TCCR1A,COM1B0)
#define OC1B_NORMAL_AND_CTC_SET B1(TCCR1A,COM1B1);B1(TCCR1A,COM1B0)
//OC1B_FAST_PWM;
#define OC1B_FASTPWM_NO_OUTPUT B0(TCCR1A,COM1B1);B0(TCCR1A,COM1B0)
#define OC1B_FASTPWM_TOGGLE B0(TCCR1A,COM1B1);B1(TCCR1A,COM1B0)
#define OC1B_FASTPWM_CLEAR B1(TCCR1A,COM1B1);B0(TCCR1A,COM1B0)
#define OC1B_FASTPWM_SET B1(TCCR1A,COM1B1);B1(TCCR1A,COM1B0)
//OC1B_PHASE_CORRECT;
#define OC1B_PHASECORRECT_AND_PHASE_AND_FREQUENCYCORRECT_NO_OUTPUT B0(TCCR1A,COM1B1);B0(TCCR1A,COM1B0)
#define OC1B_PHASECORRECT_AND_PHASE_AND_FREQUENCYCORRECT_TOGGLE B0(TCCR1A,COM1B1);B1(TCCR1A,COM1B0)
#define OC1B_PHASECORRECT_AND_PHASE_AND_FREQUENCYCORRECT_CLEAR B1(TCCR1A,COM1B1);B0(TCCR1A,COM1B0)
#define OC1B_PHASECORRECT_AND_PHASE_AND_FREQUENCYCORRECT_SET B1(TCCR1A,COM1B1);B1(TCCR1A,COM1B0)
//============= TIMER2============= //
//STOP;
#define TIMER2_STOP B0(TCCR2B,CS22);B0(TCCR2B,CS21);B0(TCCR2B,CS20)
//PRESCALER;
#define TIMER2_START_1 B0(TCCR2B,CS22);B0(TCCR2B,CS21);B1(TCCR2B,CS20)
#define TIMER2_START_8 B0(TCCR2B,CS22);B1(TCCR2B,CS21);B0(TCCR2B,CS20)
#define TIMER2_START_64 B0(TCCR2B,CS22);B1(TCCR2B,CS21);B1(TCCR2B,CS20)
#define TIMER2_START_256 B1(TCCR2B,CS22);B0(TCCR2B,CS21);B0(TCCR2B,CS20)
#define TIMER2_START_1024 B1(TCCR2B,CS22);B0(TCCR2B,CS21);B1(TCCR2B,CS20)
//VALUE;
#define TIMER2_SET_VALUE(val) TCNT2=val //val = [0 ~ 255];
#define TIMER2_VALUE TCNT2
*/

//============ AT90CAN ========================================================================//

//============= TIMER0============= //
//FORCE OUTPUT COMPARE
#define TIMER0_FORCE_OUTPUT_COMPARE_A B1(TCCR0A,FOC0A);
//WAVEFORM GENERATION MODE
#define	TIMER0_WAVEFORM_NORMAL				B0(TCCR0A,WGM01);B0(TCCR0A,WGM00) 
#define	TIMER0_WAVEFORM_PHASE_CORRECT_PWM	B0(TCCR0A,WGM01);B1(TCCR0A,WGM00)
#define	TIMER0_WAVEFORM_CTC					B1(TCCR0A,WGM01);B0(TCCR0A,WGM00)
#define	TIMER0_WAVEFORM_FAST_PWM			B1(TCCR0A,WGM01);B1(TCCR0A,WGM00)
//COMPARE OUTPUT MODE, NON-PWM MODE
#define TIMER0_NONPWM_NORMAL				B0(TCCR0A,COM0A1);B0(TCCR0A,COM0A0)
#define TIMER0_NONPWMRE_TOGGLE				B0(TCCR0A,COM0A1);B1(TCCR0A,COM0A0)
#define TIMER0_NONPWM_CLEAR					B1(TCCR0A,COM0A1);B0(TCCR0A,COM0A0)
#define TIMER0_NONPWM_SET					B1(TCCR0A,COM0A1);B1(TCCR0A,COM0A0)
//COMPARE OUTPUT MODE, FAST-PWM MODE
#define TIMER0_FASTPWM_NORMAL				B0(TCCR0A,COM0A1);B0(TCCR0A,COM0A0)
#define TIMER0_FASTPWM_RESERVED				B0(TCCR0A,COM0A1);B1(TCCR0A,COM0A0)
#define TIMER0_FASTPWM_NON_INVERTING		B1(TCCR0A,COM0A1);B0(TCCR0A,COM0A0)
#define TIMER0_FASTPWM_INVERTING			B1(TCCR0A,COM0A1);B1(TCCR0A,COM0A0)
//COMPARE OUTPUT MODE, PHASE CORRECT PWM MODE
#define TIMER0_PAHASE_CORRECT_PWM_NORMAL	B0(TCCR0A,COM0A1);B0(TCCR0A,COM0A0)
#define TIMER0_PAHASE_CORRECT_PWM_RESERVED	B0(TCCR0A,COM0A1);B1(TCCR0A,COM0A0)
#define TIMER0_PAHASE_CORRECT_PWM_CU_SD		B1(TCCR0A,COM0A1);B0(TCCR0A,COM0A0) //clear OC0A on compare match when up-counting / set OC0A on compare match when downcounting
#define TIMER0_PAHASE_CORRECT_PWM_SU_CD		B1(TCCR0A,COM0A1);B1(TCCR0A,COM0A0) //set OC0A on compare match when up-counting / clear OC0A on compare match when downcounting
//STOP;
#define TIMER0_STOP			B0(TCCR0A,CS02);B0(TCCR0A,CS01);B0(TCCR0A,CS00)
//PRESCALER;
#define TIMER0_START_1		B0(TCCR0A,CS02);B0(TCCR0A,CS01);B1(TCCR0A,CS00)
#define TIMER0_START_8		B0(TCCR0A,CS02);B1(TCCR0A,CS01);B0(TCCR0A,CS00)
#define TIMER0_START_64		B0(TCCR0A,CS02);B1(TCCR0A,CS01);B1(TCCR0A,CS00)
#define TIMER0_START_256	B1(TCCR0A,CS02);B0(TCCR0A,CS01);B0(TCCR0A,CS00)
#define TIMER0_START_1024	B1(TCCR0A,CS02);B0(TCCR0A,CS01);B1(TCCR0A,CS00)
//VALUE;
#define TIMER0_SET_VALUE(val) TCNT0=val //val = [0 ~ 255];
#define TIMER0_VALUE TCNT0

#define PWM0_MODE14 B1(TCCR1B,WGM13);B1(TCCR1B,WGM12);B1(TCCR1A,WGM10)

void PWM0Init()
{
	PWM0_MODE14;
	TIMER0_WAVEFORM_FAST_PWM;
	TIMER0_FASTPWM_NON_INVERTING;
	TIMER0_START_8;
	ICR1=4999;//fPWM=50Hz (Period = 20ms Standard)
}
void PWM0OutputSet(uint8_t duty)
{
	OCR0A=duty;
}


//============= TIMER1============= //
/*

//STOP;
#define TIMER1_STOP			B0(TCCR1B,CS12);B0(TCCR1B,CS11);B0(TCCR1B,CS10)
//PRESCALER;
#define TIMER1_START_1		B0(TCCR1B,CS12);B0(TCCR1B,CS11);B1(TCCR1B,CS10)
#define TIMER1_START_8		B0(TCCR1B,CS12);B1(TCCR1B,CS11);B0(TCCR1B,CS10)
#define TIMER1_START_64		B0(TCCR1B,CS12);B1(TCCR1B,CS11);B1(TCCR1B,CS10)
#define TIMER1_START_256	B1(TCCR1B,CS12);B0(TCCR1B,CS11);B0(TCCR1B,CS10)
#define TIMER1_START_1024	B1(TCCR1B,CS12);B0(TCCR1B,CS11);B1(TCCR1B,CS10)
//VALUE;
#define TIMER1_SET_VALUE(val) TCNT1=val //val = [0 ~ 65536];
#define TIMER1_VALUE TCNT1 //val = [0 ~ 65536];
//MODE:
//NORMAL;
#define TIMER1_NORMAL									B0(TCCR1B,WGM13);B0(TCCR1B,WGM12);B0(TCCR1A,WGM11);B0(TCCR1A,WGM10)
//PWM;
#define TIMER1_PWM_PHASECORRECT_8BIT					B0(TCCR1B,WGM13);B0(TCCR1B,WGM12);B0(TCCR1A,WGM11);B1(TCCR1A,WGM10)
#define TIMER1_PWM_PHASECORRECT_9BIT					B0(TCCR1B,WGM13);B0(TCCR1B,WGM12);B1(TCCR1A,WGM11);B0(TCCR1A,WGM10)
#define TIMER1_PWM_PHASECORRECT_10BIT					B0(TCCR1B,WGM13);B0(TCCR1B,WGM12);B1(TCCR1A,WGM11);B1(TCCR1A,WGM10)
#define TIMER1_PWM_PHASECORRECT_ICR1					B1(TCCR1B,WGM13);B0(TCCR1B,WGM12);B1(TCCR1A,WGM11);B0(TCCR1A,WGM10)
#define TIMER1_PWM_PHASECORRECT_OCR1A					B1(TCCR1B,WGM13);B0(TCCR1B,WGM12);B1(TCCR1A,WGM11);B1(TCCR1A,WGM10)
#define TIMER1_PWM_PHASE_AND_FREQUENCY_CORRECT_ICR1		B1(TCCR1B,WGM13);B0(TCCR1B,WGM12);B0(TCCR1A,WGM11);B0(TCCR1A,WGM10)
#define TIMER1_PWM_PHASE_AND_FREQUENCY_CORRECT_OCR1A	B1(TCCR1B,WGM13);B0(TCCR1B,WGM12);B0(TCCR1A,WGM11);B1(TCCR1A,WGM10)
//FAST_PWM;
#define TIMER1_FASTPWM_8BIT		B0(TCCR1B,WGM13);B1(TCCR1B,WGM12);B0(TCCR1A,WGM11);B1(TCCR1A,WGM10)
#define TIMER1_FASTPWM_9BIT		B0(TCCR1B,WGM13);B1(TCCR1B,WGM12);B1(TCCR1A,WGM11);B0(TCCR1A,WGM10)
#define TIMER1_FASTPWM_10BIT	B0(TCCR1B,WGM13);B1(TCCR1B,WGM12);B1(TCCR1A,WGM11);B1(TCCR1A,WGM10)
#define TIMER1_FASTPWM_ICR1		B1(TCCR1B,WGM13);B1(TCCR1B,WGM12);B1(TCCR1A,WGM11);B0(TCCR1A,WGM10)
#define TIMER1_FASTPWM_OCR1A	B1(TCCR1B,WGM13);B1(TCCR1B,WGM12);B1(TCCR1A,WGM11);B1(TCCR1A,WGM10)
//CTC;
#define TIMER1_CTC_OCR1A		B0(TCCR1B,WGM13);B1(TCCR1B,WGM12);B0(TCCR1A,WGM11);B0(TCCR1A,WGM10)
#define TIMER1_CTC_ICR1			B1(TCCR1B,WGM13);B1(TCCR1B,WGM12);B0(TCCR1A,WGM11);B0(TCCR1A,WGM10)

#define TIMER1_COMPARE_OUTPUT_MODE_CHANNEL_A 
#define TIMER1_COMPARE_OUTPUT_MODE_CHANNEL_B
#define TIMER1_COMPARE_OUTPUT_MODE_CHANNEL_C


//TIMER1_CONNECTION:
//OC1A_NORMAL;
#define OC1A_NORMAL_AND_CTC_NO_OUTPUT	B0(TCCR1A,COM1A1);B0(TCCR1A,COM1A0)
#define OC1A_NORMAL_AND_CTC_TOGGLE		B0(TCCR1A,COM1A1);B1(TCCR1A,COM1A0)
#define OC1A_NORMAL_AND_CTC_CLEAR		B1(TCCR1A,COM1A1);B0(TCCR1A,COM1A0)
#define OC1A_NORMAL_AND_CTC_SET			B1(TCCR1A,COM1A1);B1(TCCR1A,COM1A0)
//OC1A_FAST_PWM;
#define OC1A_FASTPWM_NO_OUTPUT	B0(TCCR1A,COM1A1);B0(TCCR1A,COM1A0)
#define OC1A_FASTPWM_TOGGLE		B0(TCCR1A,COM1A1);B1(TCCR1A,COM1A0)
#define OC1A_FASTPWM_CLEAR		B1(TCCR1A,COM1A1);B0(TCCR1A,COM1A0)
#define OC1A_FASTPWM_SET		B1(TCCR1A,COM1A1);B1(TCCR1A,COM1A0)
//OC1A_PHASE_CORRECT;
#define OC1A_PHASECORRECT_AND_PHASE_AND_FREQUENCYCORRECT_NO_OUTPUT	B0(TCCR1A,COM1A1);B0(TCCR1A,COM1A0)
#define OC1A_PHASECORRECT_AND_PHASE_AND_FREQUENCYCORRECT_TOGGLE		B0(TCCR1A,COM1A1);B1(TCCR1A,COM1A0)
#define OC1A_PHASECORRECT_AND_PHASE_AND_FREQUENCYCORRECT_CLEAR		B1(TCCR1A,COM1A1);B0(TCCR1A,COM1A0)
#define OC1A_PHASECORRECT_AND_PHASE_AND_FREQUENCYCORRECT_SET		B1(TCCR1A,COM1A1);B1(TCCR1A,COM1A0)


//OC1B_NORMAL;
#define OC1B_NORMAL_AND_CTC_NO_OUTPUT	B0(TCCR1A,COM1B1);B0(TCCR1A,COM1B0)
#define OC1B_NORMAL_AND_CTC_TOGGLE		B0(TCCR1A,COM1B1);B1(TCCR1A,COM1B0)
#define OC1B_NORMAL_AND_CTC_CLEAR		B1(TCCR1A,COM1B1);B0(TCCR1A,COM1B0)
#define OC1B_NORMAL_AND_CTC_SET			B1(TCCR1A,COM1B1);B1(TCCR1A,COM1B0)
//OC1B_FAST_PWM;
#define OC1B_FASTPWM_NO_OUTPUT	B0(TCCR1A,COM1B1);B0(TCCR1A,COM1B0)
#define OC1B_FASTPWM_TOGGLE		B0(TCCR1A,COM1B1);B1(TCCR1A,COM1B0)
#define OC1B_FASTPWM_CLEAR		B1(TCCR1A,COM1B1);B0(TCCR1A,COM1B0)
#define OC1B_FASTPWM_SET		B1(TCCR1A,COM1B1);B1(TCCR1A,COM1B0)
//OC1B_PHASE_CORRECT;
#define OC1B_PHASECORRECT_AND_PHASE_AND_FREQUENCYCORRECT_NO_OUTPUT	B0(TCCR1A,COM1B1);B0(TCCR1A,COM1B0)
#define OC1B_PHASECORRECT_AND_PHASE_AND_FREQUENCYCORRECT_TOGGLE		B0(TCCR1A,COM1B1);B1(TCCR1A,COM1B0)
#define OC1B_PHASECORRECT_AND_PHASE_AND_FREQUENCYCORRECT_CLEAR		B1(TCCR1A,COM1B1);B0(TCCR1A,COM1B0)
#define OC1B_PHASECORRECT_AND_PHASE_AND_FREQUENCYCORRECT_SET		B1(TCCR1A,COM1B1);B1(TCCR1A,COM1B0)

//OC1BC_NORMAL;
#define OC1C_NORMAL_AND_CTC_NO_OUTPUT	B0(TCCR1A,COM1C1);B0(TCCR1A,COM1C0)
#define OC1C_NORMAL_AND_CTC_TOGGLE		B0(TCCR1A,COM1C1);B1(TCCR1A,COM1C0)
#define OC1C_NORMAL_AND_CTC_CLEAR		B1(TCCR1A,COM1C1);B0(TCCR1A,COM1C0)
#define OC1C_NORMAL_AND_CTC_SET			B1(TCCR1A,COM1C1);B1(TCCR1A,COM1C0)
//OC1C_FAST_PWM;
#define OC1C_FASTPWM_NO_OUTPUT	B0(TCCR1A,COM1C1);B0(TCCR1A,COM1C0)
#define OC1C_FASTPWM_TOGGLE		B0(TCCR1A,COM1C1);B1(TCCR1A,COM1C0)
#define OC1C_FASTPWM_CLEAR		B1(TCCR1A,COM1C1);B0(TCCR1A,COM1C0)
#define OC1C_FASTPWM_SET		B1(TCCR1A,COM1C1);B1(TCCR1A,COM1C0)
//OC1C_PHASE_CORRECT;
#define OC1C_PHASECORRECT_AND_PHASE_AND_FREQUENCYCORRECT_NO_OUTPUT	B0(TCCR1A,COM1C1);B0(TCCR1A,COM1C0)
#define OC1C_PHASECORRECT_AND_PHASE_AND_FREQUENCYCORRECT_TOGGLE		B0(TCCR1A,COM1C1);B1(TCCR1A,COM1C0)
#define OC1C_PHASECORRECT_AND_PHASE_AND_FREQUENCYCORRECT_CLEAR		B1(TCCR1A,COM1C1);B0(TCCR1A,COM1C0)
#define OC1C_PHASECORRECT_AND_PHASE_AND_FREQUENCYCORRECT_SET		B1(TCCR1A,COM1C1);B1(TCCR1A,COM1C0)

void PWM1Init()
{
	PWM1_MODE14;
	TIMER1_WAVEFORM_FAST_PWM;
	TIMER1_FASTPWM_NON_INVERTING;
	TIMER1_START_8;
	ICR1=4999;//fPWM=50Hz (Period = 20ms Standard)
}
void PWM0OutputSet(uint8_t duty)
{
	OCR0A=duty;
}
*/


//============= TIMER2============= //
//FORCE OUTPUT COMPARE
#define TIMER2_FORCE_OUTPUT_COMPARE_A B1(TCCR2A,FOC2A);
//WAVEFORM GENERATION MODE
#define	TIMER2_WAVEFORM_NORMAL				B0(TCCR2A,WGM01);B0(TCCR2A,WGM00)
#define	TIMER2_WAVEFORM_PHASE_CORRECT_PWM	B0(TCCR2A,WGM01);B1(TCCR2A,WGM00)
#define	TIMER2_WAVEFORM_CTC					B1(TCCR2A,WGM01);B0(TCCR2A,WGM00)
#define	TIMER2_WAVEFORM_FAST_PWM			B1(TCCR2A,WGM01);B1(TCCR2A,WGM00)
//COMPARE OUTPUT MODE, NON-PWM MODE
#define TIMER2_NONPWM_NORMAL				B0(TCCR2A,COM0A1);B0(TCCR2A,COM0A0)
#define TIMER2_NONPWMRE_TOGGLE				B0(TCCR2A,COM0A1);B1(TCCR2A,COM0A0)
#define TIMER2_NONPWM_CLEAR					B1(TCCR2A,COM0A1);B0(TCCR2A,COM0A0)
#define TIMER2_NONPWM_SET					B1(TCCR2A,COM0A1);B1(TCCR2A,COM0A0)
//COMPARE OUTPUT MODE, FAST-PWM MODE
#define TIMER2_FASTPWM_NORMAL				B0(TCCR2A,COM0A1);B0(TCCR2A,COM0A0)
#define TIMER2_FASTPWM_RESERVED				B0(TCCR2A,COM0A1);B1(TCCR2A,COM0A0)
#define TIMER2_FASTPWM_NON_INVERTING		B1(TCCR2A,COM0A1);B0(TCCR2A,COM0A0)
#define TIMER2_FASTPWM_INVERTING			B1(TCCR2A,COM0A1);B1(TCCR2A,COM0A0)
//COMPARE OUTPUT MODE, PHASE CORRECT PWM MODE
#define TIMER2_PAHASE_CORRECT_PWM_NORMAL	B0(TCCR2A,COM0A1);B0(TCCR2A,COM0A0)
#define TIMER2_PAHASE_CORRECT_PWM_RESERVED	B0(TCCR2A,COM0A1);B1(TCCR2A,COM0A0)
#define TIMER2_PAHASE_CORRECT_PWM_CU_SD		B1(TCCR2A,COM0A1);B0(TCCR2A,COM0A0) 
#define TIMER2_PAHASE_CORRECT_PWM_SU_CD		B1(TCCR2A,COM0A1);B1(TCCR2A,COM0A0) 
//STOP;
#define TIMER2_STOP			B0(TCCR2A,CS22);B0(TCCR2A,CS21);B0(TCCR2A,CS20)
//PRESCALER;
#define TIMER2_START_1		B0(TCCR2A,CS22);B0(TCCR2A,CS21);B1(TCCR2A,CS20)
#define TIMER2_START_8		B0(TCCR2A,CS22);B1(TCCR2A,CS21);B0(TCCR2A,CS20)
#define TIMER2_START_64		B0(TCCR2A,CS22);B1(TCCR2A,CS21);B1(TCCR2A,CS20)
#define TIMER2_START_256	B1(TCCR2A,CS22);B0(TCCR2A,CS21);B0(TCCR2A,CS20)
#define TIMER2_START_1024	B1(TCCR2A,CS22);B0(TCCR2A,CS21);B1(TCCR2A,CS20)
//VALUE;
#define TIMER2_SET_VALUE(val) TCNT2=val //val = [0 ~ 255];
#define TIMER2_VALUE TCNT2
// 
// void PWMInit()
// {
// 	TIMER2_WAVEFORM_FAST_PWM;
// 	TIMER2_FASTPWM_NON_INVERTING;
// 	TIMER2_START_64;
// }
// void PWMOutputSet(uint16_t duty)
// {
// 	OCR2A=duty;
// }

//=============TIMER3============= //



